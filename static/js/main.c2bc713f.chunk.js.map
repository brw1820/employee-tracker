{"version":3,"sources":["components/EmployeeCard/EmployeeCard.jsx","containers/Home.jsx","App.js","serviceWorker.js","index.js"],"names":["EmployeeCard","props","className","style","width","src","image","alt","lastName","firstName","location","email","phone","Homepage","state","searchInput","employees","value","handleInputChange","event","setState","target","name","console","log","handleSearchInput","searchedEmployees","filter","employee","first","includes","sortEmployees","sortedEmployees","sort","a","b","nameA","toLowerCase","nameB","axios","get","then","res","data","results","catch","err","type","onChange","this","placeholder","onClick","map","picture","large","id","last","city","Component","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"mSAiCeA,MA9Bf,SAAsBC,GACpB,OACE,yBAAKC,UAAU,OAAOC,MAAO,CAAEC,MAAO,QACpC,yBAAKF,UAAU,kBACb,yBAAKA,UAAU,YACb,yBAAMG,IAAKJ,EAAMK,MAAOJ,UAAU,WAAWK,IAAKN,EAAMO,YAE1D,yBAAKN,UAAU,YACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,gBACb,uBAAGA,UAAW,cACZ,yCAAuBD,EAAMQ,UAD/B,IAC2CR,EAAMO,UAEjD,uBAAGN,UAAY,YACb,6CAA2BD,EAAMS,UAEnC,uBAAGR,UAAU,SACZ,2CAAyBD,EAAMU,OAEhC,uBAAGT,UAAU,SACX,0CAAwBD,EAAMW,a,iBCiF/BC,G,kNAlGbC,MAAQ,CACNC,YAAa,GACbC,UAAW,GACXC,MAAO,I,EAcTC,kBAAoB,SAACC,GACnB,EAAKC,SAAL,eAAiBD,EAAME,OAAOC,KAAOH,EAAME,OAAOJ,QAClDM,QAAQC,IAAI,EAAKV,MAAMC,aACvB,EAAKU,qB,EAGPA,kBAAoB,WAClB,IAAMC,EAAoB,EAAKZ,MAAME,UAAUW,QAAO,SAACC,GAAD,OACpDA,EAASN,KAAKO,MAAMC,SAAS,EAAKhB,MAAMC,gBAE1CQ,QAAQC,IAAIE,GACZ,EAAKN,SAAS,CAAEJ,UAAWU,K,EAG7BK,cAAgB,WACd,IAAMC,EAAkB,EAAKlB,MAAME,UAAUiB,MAAK,SAAUC,EAAGC,GAC7D,IAAMC,EAAQF,EAAEZ,KAAKO,MAAMQ,cACrBC,EAAQH,EAAEb,KAAKO,MAAMQ,cAC3B,OAAID,EAAQE,EACH,EAELF,EAAQE,GACF,EAEH,KAET,EAAKlB,SAAS,CAAEJ,UAAWgB,IAC3BT,QAAQC,IAAI,W,kEAtCO,IAAD,OAClBe,IACGC,IAAI,0CACJC,MAAK,SAACC,GACL,EAAKtB,SAAS,CAAEJ,UAAW0B,EAAIC,KAAKC,aAErCC,OAAM,SAACC,GACNvB,QAAQC,IAAIsB,Q,+BAyChB,OACE,yBAAK5C,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,YACb,+CAEF,yBAAKA,UAAU,YACb,6BACE,wDACA,2BACE6C,KAAK,OACLC,SAAUC,KAAK/B,kBACfgC,YAAY,yBACZhD,UAAU,eACVoB,KAAK,gBAEP,4BAAQ6B,QAASF,KAAKlB,eAAtB,mCAMN,yBAAK7B,UAAU,OACb,yBAAKA,UAAU,YACb,yBAAKA,UAAU,sBACZ+C,KAAKnC,MAAME,UAAUoC,KAAI,SAACT,GAAD,OACxB,kBAAC,EAAD,CACErC,MAAOqC,EAAKU,QAAQC,MACpBC,GAAIZ,EAAKY,GAAGtC,MACZR,UAAWkC,EAAKrB,KAAKO,MACrBrB,SAAUmC,EAAKrB,KAAKkC,KACpB9C,SAAUiC,EAAKjC,SAAS+C,KACxB9C,MAAOgC,EAAKhC,MACZC,MAAO+B,EAAK/B,mB,GAxFP8C,cCMRC,MARf,WACE,OACE,yBAAKzD,UAAU,OACjB,kBAAC,EAAD,QCMkB0D,QACW,cAA7BC,OAAOnD,SAASoD,UAEe,UAA7BD,OAAOnD,SAASoD,UAEhBD,OAAOnD,SAASoD,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9B,MAAK,SAAA+B,GACJA,EAAaC,gBAEd5B,OAAM,SAAA6B,GACLnD,QAAQmD,MAAMA,EAAMC,c","file":"static/js/main.c2bc713f.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./EmployeeCard.css\";\r\n\r\nfunction EmployeeCard(props) {\r\n  return (\r\n    <div className=\"card\" style={{ width: \"25%\" }}>\r\n      <div className=\"row no-gutters\">\r\n        <div className=\"col-md-3\">\r\n          <img  src={props.image} className=\"card-img\" alt={props.lastName} />\r\n        </div>\r\n        <div className=\"col-md-6\">\r\n          <div className=\"main-card\">\r\n            <div className=\"return-value\">\r\n              <p className= \"first-name\">\r\n                <strong>Name:</strong>{props.firstName} {props.lastName}\r\n              </p>\r\n              <p className = \"location\">\r\n                <strong>Location:</strong>{props.location}\r\n              </p>\r\n              <p className=\"email\">\r\n               <strong>E-Mail:</strong>{props.email}\r\n              </p>\r\n              <p className=\"phone\">\r\n                <strong>Phone:</strong>{props.phone}\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default EmployeeCard;","import React, { Component } from \"react\";\r\nimport EmployeeCard from \"../components/EmployeeCard/EmployeeCard\";\r\nimport axios from \"axios\";\r\nimport \"./Home.css\";\r\n\r\nclass Homepage extends Component {\r\n  state = {\r\n    searchInput: \"\",\r\n    employees: [],\r\n    value: \"\",\r\n  };\r\n\r\n  componentDidMount() {\r\n    axios\r\n      .get(\"https://randomuser.me/api/?results=100\")\r\n      .then((res) => {\r\n        this.setState({ employees: res.data.results });\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  }\r\n\r\n  handleInputChange = (event) => {\r\n    this.setState({ [event.target.name]: event.target.value });\r\n    console.log(this.state.searchInput);\r\n    this.handleSearchInput();\r\n  };\r\n\r\n  handleSearchInput = () => {\r\n    const searchedEmployees = this.state.employees.filter((employee) =>\r\n      employee.name.first.includes(this.state.searchInput)\r\n    );\r\n    console.log(searchedEmployees);\r\n    this.setState({ employees: searchedEmployees });\r\n  };\r\n\r\n  sortEmployees = () => {\r\n    const sortedEmployees = this.state.employees.sort(function (a, b) {\r\n      const nameA = a.name.first.toLowerCase();\r\n      const nameB = b.name.first.toLowerCase();\r\n      if (nameA > nameB) {\r\n        return 1;\r\n      }\r\n      if (nameA < nameB) {\r\n        return -1;\r\n      }\r\n      return 0;\r\n    });\r\n    this.setState({ employees: sortedEmployees });\r\n    console.log(\"string\");\r\n  };\r\n\r\n  // const sortedEmployees = this.state.employees.sort(compare);\r\n\r\n  // this.setState({\r\n  //   employees: sortedEmployees\r\n  // })\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"row\">\r\n          <div className=\"col-sm-3\">\r\n            <h1>Your Employees</h1>\r\n          </div>\r\n          <div className=\"col-sm-3\">\r\n            <div>\r\n              <h4>Search for an employee: </h4>\r\n              <input\r\n                type=\"text\"\r\n                onChange={this.handleInputChange}\r\n                placeholder=\"Search for an Employee\"\r\n                className=\"form-control\"\r\n                name=\"searchInput\"\r\n              />\r\n              <button onClick={this.sortEmployees}>\r\n                Sort Employee Alphabetically\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"row\">\r\n          <div className=\"col-sm-3\">\r\n            <div className=\"employee-container\">\r\n              {this.state.employees.map((data) => (\r\n                <EmployeeCard\r\n                  image={data.picture.large}\r\n                  id={data.id.value}\r\n                  firstName={data.name.first}\r\n                  lastName={data.name.last}\r\n                  location={data.location.city}\r\n                  email={data.email}\r\n                  phone={data.phone}\r\n                />\r\n              ))}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Homepage;\r\n","import React from 'react';\r\nimport Homepage from \"./containers/Home\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n  <Homepage />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}